/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Coupon = {
  _id: string;
  _type: "coupon";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  code?: string;
  description?: string;
  discountType?: "percentage" | "fixed";
  discountValue?: number;
  minimumAmount?: number;
  maximumDiscount?: number;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
  usageLimit?: number;
  applicableCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
};

export type UserCart = {
  _id: string;
  _type: "userCart";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkUserId?: string;
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    quantity?: number;
    size?: string;
    _key: string;
  }>;
  updatedAt?: string;
};

export type UserWishlist = {
  _id: string;
  _type: "userWishlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  items?: Array<{
    productId?: string;
    productName?: string;
    addedAt?: string;
    _key: string;
  }>;
  updatedAt?: string;
};

export type ProductReel = {
  _id: string;
  _type: "productReel";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  video?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  likes?: number;
  views?: number;
  likedBy?: Array<{
    userId?: string;
    likedAt?: string;
    _key: string;
  }>;
  tags?: Array<string>;
};

export type Blogcategory = {
  _id: string;
  _type: "blogcategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogcategory";
  }>;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type OrderItem = {
  _type: "orderItem";
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  quantity?: number;
  size?: string;
  price?: number;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customer?: {
    name?: string;
    email?: string;
    clerkUserId?: string;
  };
  shippingAddress?: {
    name?: string;
    address?: string;
    addressLine2?: string;
    city?: string;
    state?: string;
    zip?: string;
    phoneNumber?: string;
  };
  items?: Array<{
    _key: string;
  } & OrderItem>;
  totalAmount?: number;
  discountAmount?: number;
  couponCode?: string;
  paymentStatus?: "pending" | "paid" | "failed";
  orderStatus?: "pending" | "confirmed" | "processing" | "packed" | "shipped" | "out for delivery" | "delivered" | "cancelled";
  paymentMethod?: "phonepe";
  paymentDetails?: {
    merchantTransactionId?: string;
    transactionId?: string;
    paymentInstrument?: {
      type?: string;
      accountHolderName?: string;
      accountType?: string;
      cardNetwork?: string;
      upiTransactionId?: string;
      utr?: string;
    };
  };
  createdAt?: string;
  updatedAt?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  productLink?: string;
  status?: "new" | "hot" | "sale";
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  range?: number;
  featured?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Coupon | UserCart | UserWishlist | ProductReel | Blogcategory | Blog | Author | OrderItem | Order | Product | BlockContent | Category | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/(reels)/video/[slug]/page.tsx
// Variable: reelsQuery
// Query: *[_type == "productReel"] {  _id,  video {    "url": asset->url  },  product-> {    _id,    name,    description,    images[] {      "url": asset->url    },    stock,    price,    hasSizes,    sizes,    slug {      current    },    discount  },  likes,  views,  tags} | order(_createdAt desc)
export type ReelsQueryResult = Array<{
  _id: string;
  video: {
    url: string | null;
  } | null;
  product: {
    _id: string;
    name: string | null;
    description: string | null;
    images: Array<{
      url: string | null;
    }> | null;
    stock: null;
    price: number | null;
    hasSizes: null;
    sizes: null;
    slug: {
      current: string | null;
    } | null;
    discount: number | null;
  } | null;
  likes: number | null;
  views: number | null;
  tags: Array<string> | null;
}>;
// Variable: reelBySlugQuery
// Query: *[_type == "productReel" && product->slug.current == $slug][0] {  _id,  video {    "url": asset->url  },  product-> {    _id,    name,    description,    images[] {      "url": asset->url    },    stock,    price,    hasSizes,    sizes,    slug {      current    },    discount  },  likes,  views,  tags}
export type ReelBySlugQueryResult = {
  _id: string;
  video: {
    url: string | null;
  } | null;
  product: {
    _id: string;
    name: string | null;
    description: string | null;
    images: Array<{
      url: string | null;
    }> | null;
    stock: null;
    price: number | null;
    hasSizes: null;
    sizes: null;
    slug: {
      current: string | null;
    } | null;
    discount: number | null;
  } | null;
  likes: number | null;
  views: number | null;
  tags: Array<string> | null;
} | null;

// Source: ./sanity/queries/query.ts
// Variable: PRODUCTS_QUERY
// Query: *[_type == "product"] | order(name asc)
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  productLink?: string;
  status?: "hot" | "new" | "sale";
}>;
// Variable: BRANDS_QUERY
// Query: *[_type=='brand'] | order(name asc)
export type BRANDS_QUERYResult = Array<never>;
// Variable: LATEST_BLOG_QUERY
// Query: *[_type == 'blog' && isLatest == true]|order(name asc){      ...,      blogcategories[]->{      title    }    }
export type LATEST_BLOG_QUERYResult = Array<{
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
}>;
// Variable: DEAL_PRODUCTS
// Query: *[_type == 'product' && status == 'hot'] | order(name asc){    ...,"categories": categories[]->title  }
export type DEAL_PRODUCTSResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  categories: Array<string | null> | null;
  productLink?: string;
  status?: "hot" | "new" | "sale";
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current == $slug] | order(name asc) [0] {    ...,    "images": images[]{      ...,      "url": asset->url    },    "categories": categories[]->{      _id,      title,      slug    },    "brand": brand->{      title,      description    },    "colorGroup": *[_type == "colorGroup" && references(^._id)][0] {      _id,      name,      "products": products[]-> {        _id,        name,        slug,        images,        stock      }    }  }
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
    url: string | null;
  }> | null;
  description?: string;
  price?: number;
  discount?: number;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  productLink?: string;
  status?: "hot" | "new" | "sale";
  brand: null;
  colorGroup: null;
} | null;
// Variable: REEL_BY_PRODUCT_SLUG_QUERY
// Query: *[_type == "productReel" && product->slug.current == $slug][0] {    _id,    video {      "url": asset->url    }  }
export type REEL_BY_PRODUCT_SLUG_QUERYResult = {
  _id: string;
  video: {
    url: string | null;
  } | null;
} | null;
// Variable: BRAND_QUERY
// Query: *[_type == "product" && slug.current == $slug]{  "brandName": brand->title}
export type BRAND_QUERYResult = Array<{
  brandName: null;
}>;
// Variable: MY_ORDERS_QUERY
// Query: *[_type == 'order' && customer.clerkUserId == $userId] | order(createdAt desc) {  ...,  items[] {    ...,    product-> {      _id,      name,      images,      price,      slug,      productLink    }  }}
export type MY_ORDERS_QUERYResult = Array<{
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customer?: {
    name?: string;
    email?: string;
    clerkUserId?: string;
  };
  shippingAddress?: {
    name?: string;
    address?: string;
    addressLine2?: string;
    city?: string;
    state?: string;
    zip?: string;
    phoneNumber?: string;
  };
  items: Array<{
    _key: string;
    _type: "orderItem";
    product: {
      _id: string;
      name: string | null;
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
      price: number | null;
      slug: Slug | null;
      productLink: string | null;
    } | null;
    quantity?: number;
    size?: string;
    price?: number;
  }> | null;
  totalAmount?: number;
  discountAmount?: number;
  couponCode?: string;
  paymentStatus?: "failed" | "paid" | "pending";
  orderStatus?: "cancelled" | "confirmed" | "delivered" | "out for delivery" | "packed" | "pending" | "processing" | "shipped";
  paymentMethod?: "phonepe";
  paymentDetails?: {
    merchantTransactionId?: string;
    transactionId?: string;
    paymentInstrument?: {
      type?: string;
      accountHolderName?: string;
      accountType?: string;
      cardNetwork?: string;
      upiTransactionId?: string;
      utr?: string;
    };
  };
  createdAt?: string;
  updatedAt?: string;
}>;
// Variable: GET_ALL_BLOG
// Query: *[_type == 'blog'] | order(publishedAt desc)[0...$quantity]{  ...,       blogcategories[]->{    title}    }
export type GET_ALL_BLOGResult = Array<{
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
}>;
// Variable: SINGLE_BLOG_QUERY
// Query: *[_type == "blog" && slug.current == $slug][0]{  ...,   blogcategories[]->{    title,    "slug": slug.current,  },}
export type SINGLE_BLOG_QUERYResult = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
} | null;
// Variable: BLOG_CATEGORIES
// Query: *[_type == "blog"]{     blogcategories[]->{    ...    }  }
export type BLOG_CATEGORIESResult = Array<{
  blogcategories: Array<{
    _id: string;
    _type: "blogcategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
}>;
// Variable: OTHERS_BLOG_QUERY
// Query: *[  _type == "blog"  && defined(slug.current)  && slug.current != $slug]|order(publishedAt desc)[0...$quantity]{...  publishedAt,  title,  mainImage,  slug,  author,  categories[]->{    title,    "slug": slug.current,  }}
export type OTHERS_BLOG_QUERYResult = Array<{
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: Slug | null;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  } | null;
  categories: null;
}>;
// Variable: GET_USER_WISHLIST
// Query: *[_type == "userWishlist" && userId == $userId][0] {  ...,  items[] {    ...,    product-> {      _id,      name,      images,    }  }}
export type GET_USER_WISHLISTResult = {
  _id: string;
  _type: "userWishlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  items: Array<{
    productId?: string;
    productName?: string;
    addedAt?: string;
    _key: string;
    product: null;
  }> | null;
  updatedAt?: string;
} | null;
// Variable: GET_USER_CART
// Query: *[_type == "userCart" && clerkUserId == $userId][0]{    _id,    clerkUserId,    items[] {      _key,      product->{        _id,        _type,        name,        slug,        images,        description,        price,        discount,        categories,        status,        productLink      }    }  }
export type GET_USER_CARTResult = {
  _id: string;
  clerkUserId: string | null;
  items: Array<{
    _key: string;
    product: {
      _id: string;
      _type: "product";
      name: string | null;
      slug: Slug | null;
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
      description: string | null;
      price: number | null;
      discount: number | null;
      categories: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "category";
      }> | null;
      status: "hot" | "new" | "sale" | null;
      productLink: string | null;
    } | null;
  }> | null;
} | null;
// Variable: GET_USER_ADDRESSES
// Query: *[_type == "userAddresses" && clerkUserId == $userId][0] {  _id,  _type,  clerkUserId,  addresses[] {    _key,    addressName,    fullName,    phoneNumber,    addressLine1,    addressLine2,    city,    state,    pincode,    isDefault  }}
export type GET_USER_ADDRESSESResult = null;
// Variable: HOME_SECTIONS_QUERY
// Query: *[_type == "homeSection" && isActive == true] | order(coalesce(displayOrder, 999) asc) {    _id,    title,    subtitle,    displayOrder,    maxProducts,    "products": products[]->{      _id,      name,      slug,      images,      price,      discount,      status,      productLink,      categories[]->{        _id,        title,        slug      }    }  }
export type HOME_SECTIONS_QUERYResult = Array<never>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"productReel\"] {\n  _id,\n  video {\n    \"url\": asset->url\n  },\n  product-> {\n    _id,\n    name,\n    description,\n    images[] {\n      \"url\": asset->url\n    },\n    stock,\n    price,\n    hasSizes,\n    sizes,\n    slug {\n      current\n    },\n    discount\n  },\n  likes,\n  views,\n  tags\n} | order(_createdAt desc)": ReelsQueryResult;
    "*[_type == \"productReel\" && product->slug.current == $slug][0] {\n  _id,\n  video {\n    \"url\": asset->url\n  },\n  product-> {\n    _id,\n    name,\n    description,\n    images[] {\n      \"url\": asset->url\n    },\n    stock,\n    price,\n    hasSizes,\n    sizes,\n    slug {\n      current\n    },\n    discount\n  },\n  likes,\n  views,\n  tags\n}": ReelBySlugQueryResult;
    "*[_type == \"product\"] | order(name asc) ": PRODUCTS_QUERYResult;
    "*[_type=='brand'] | order(name asc) ": BRANDS_QUERYResult;
    " *[_type == 'blog' && isLatest == true]|order(name asc){\n      ...,\n      blogcategories[]->{\n      title\n    }\n    }": LATEST_BLOG_QUERYResult;
    "*[_type == 'product' && status == 'hot'] | order(name asc){\n    ...,\"categories\": categories[]->title\n  }": DEAL_PRODUCTSResult;
    "*[_type == \"product\" && slug.current == $slug] | order(name asc) [0] {\n    ...,\n    \"images\": images[]{\n      ...,\n      \"url\": asset->url\n    },\n    \"categories\": categories[]->{\n      _id,\n      title,\n      slug\n    },\n    \"brand\": brand->{\n      title,\n      description\n    },\n    \"colorGroup\": *[_type == \"colorGroup\" && references(^._id)][0] {\n      _id,\n      name,\n      \"products\": products[]-> {\n        _id,\n        name,\n        slug,\n        images,\n        stock\n      }\n    }\n  }": PRODUCT_BY_SLUG_QUERYResult;
    "*[_type == \"productReel\" && product->slug.current == $slug][0] {\n    _id,\n    video {\n      \"url\": asset->url\n    }\n  }": REEL_BY_PRODUCT_SLUG_QUERYResult;
    "*[_type == \"product\" && slug.current == $slug]{\n  \"brandName\": brand->title\n}": BRAND_QUERYResult;
    "*[_type == 'order' && customer.clerkUserId == $userId] | order(createdAt desc) {\n  ...,\n  items[] {\n    ...,\n    product-> {\n      _id,\n      name,\n      images,\n      price,\n      slug,\n      productLink\n    }\n  }\n}": MY_ORDERS_QUERYResult;
    "*[_type == 'blog'] | order(publishedAt desc)[0...$quantity]{\n  ...,  \n     blogcategories[]->{\n    title\n}\n    }\n  ": GET_ALL_BLOGResult;
    "*[_type == \"blog\" && slug.current == $slug][0]{\n  ..., \n  blogcategories[]->{\n    title,\n    \"slug\": slug.current,\n  },\n}": SINGLE_BLOG_QUERYResult;
    "*[_type == \"blog\"]{\n     blogcategories[]->{\n    ...\n    }\n  }": BLOG_CATEGORIESResult;
    "*[\n  _type == \"blog\"\n  && defined(slug.current)\n  && slug.current != $slug\n]|order(publishedAt desc)[0...$quantity]{\n...\n  publishedAt,\n  title,\n  mainImage,\n  slug,\n  author,\n  categories[]->{\n    title,\n    \"slug\": slug.current,\n  }\n}": OTHERS_BLOG_QUERYResult;
    "*[_type == \"userWishlist\" && userId == $userId][0] {\n  ...,\n  items[] {\n    ...,\n    product-> {\n      _id,\n      name,\n      images,\n    }\n  }\n}": GET_USER_WISHLISTResult;
    "*[_type == \"userCart\" && clerkUserId == $userId][0]{\n    _id,\n    clerkUserId,\n    items[] {\n      _key,\n      product->{\n        _id,\n        _type,\n        name,\n        slug,\n        images,\n        description,\n        price,\n        discount,\n        categories,\n        status,\n        productLink\n      }\n    }\n  }": GET_USER_CARTResult;
    "*[_type == \"userAddresses\" && clerkUserId == $userId][0] {\n  _id,\n  _type,\n  clerkUserId,\n  addresses[] {\n    _key,\n    addressName,\n    fullName,\n    phoneNumber,\n    addressLine1,\n    addressLine2,\n    city,\n    state,\n    pincode,\n    isDefault\n  }\n}": GET_USER_ADDRESSESResult;
    "*[_type == \"homeSection\" && isActive == true] | order(coalesce(displayOrder, 999) asc) {\n    _id,\n    title,\n    subtitle,\n    displayOrder,\n    maxProducts,\n    \"products\": products[]->{\n      _id,\n      name,\n      slug,\n      images,\n      price,\n      discount,\n      status,\n      productLink,\n      categories[]->{\n        _id,\n        title,\n        slug\n      }\n    }\n  }": HOME_SECTIONS_QUERYResult;
  }
}
